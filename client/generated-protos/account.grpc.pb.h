// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: account.proto
#ifndef GRPC_account_2eproto__INCLUDED
#define GRPC_account_2eproto__INCLUDED

#include "account.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace account {

// 账号服务
class Account final {
 public:
  static constexpr char const* service_full_name() {
    return "account.Account";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status signup(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::account::AccountResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>> Asyncsignup(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>>(AsyncsignupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>> PrepareAsyncsignup(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>>(PrepareAsyncsignupRaw(context, request, cq));
    }
    virtual ::grpc::Status login(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::account::AccountResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>> Asynclogin(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>> PrepareAsynclogin(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>>(PrepareAsyncloginRaw(context, request, cq));
    }
    virtual ::grpc::Status logout(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::account::AccountResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>> Asynclogout(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>> PrepareAsynclogout(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    virtual ::grpc::Status isAlive(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::account::AccountResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>> AsyncisAlive(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>>(AsyncisAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>> PrepareAsyncisAlive(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>>(PrepareAsyncisAliveRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void signup(::grpc::ClientContext* context, const ::account::SignupMsg* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void signup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void signup(::grpc::ClientContext* context, const ::account::SignupMsg* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void signup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void login(::grpc::ClientContext* context, const ::account::LoginMsg* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void login(::grpc::ClientContext* context, const ::account::LoginMsg* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void logout(::grpc::ClientContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void logout(::grpc::ClientContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void isAlive(::grpc::ClientContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void isAlive(::grpc::ClientContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void isAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>* AsyncsignupRaw(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>* PrepareAsyncsignupRaw(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>* AsyncloginRaw(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>* AsynclogoutRaw(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>* AsyncisAliveRaw(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::account::AccountResp>* PrepareAsyncisAliveRaw(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status signup(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::account::AccountResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>> Asyncsignup(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>>(AsyncsignupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>> PrepareAsyncsignup(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>>(PrepareAsyncsignupRaw(context, request, cq));
    }
    ::grpc::Status login(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::account::AccountResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>> Asynclogin(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>> PrepareAsynclogin(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>>(PrepareAsyncloginRaw(context, request, cq));
    }
    ::grpc::Status logout(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::account::AccountResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>> Asynclogout(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>> PrepareAsynclogout(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    ::grpc::Status isAlive(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::account::AccountResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>> AsyncisAlive(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>>(AsyncisAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>> PrepareAsyncisAlive(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::account::AccountResp>>(PrepareAsyncisAliveRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void signup(::grpc::ClientContext* context, const ::account::SignupMsg* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) override;
      void signup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) override;
      void signup(::grpc::ClientContext* context, const ::account::SignupMsg* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void signup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void login(::grpc::ClientContext* context, const ::account::LoginMsg* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) override;
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) override;
      void login(::grpc::ClientContext* context, const ::account::LoginMsg* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void logout(::grpc::ClientContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) override;
      void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) override;
      void logout(::grpc::ClientContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void isAlive(::grpc::ClientContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) override;
      void isAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, std::function<void(::grpc::Status)>) override;
      void isAlive(::grpc::ClientContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void isAlive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::account::AccountResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::account::AccountResp>* AsyncsignupRaw(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::AccountResp>* PrepareAsyncsignupRaw(::grpc::ClientContext* context, const ::account::SignupMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::AccountResp>* AsyncloginRaw(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::AccountResp>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::account::LoginMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::AccountResp>* AsynclogoutRaw(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::AccountResp>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::AccountResp>* AsyncisAliveRaw(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::account::AccountResp>* PrepareAsyncisAliveRaw(::grpc::ClientContext* context, const ::account::TokenMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_signup_;
    const ::grpc::internal::RpcMethod rpcmethod_login_;
    const ::grpc::internal::RpcMethod rpcmethod_logout_;
    const ::grpc::internal::RpcMethod rpcmethod_isAlive_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status signup(::grpc::ServerContext* context, const ::account::SignupMsg* request, ::account::AccountResp* response);
    virtual ::grpc::Status login(::grpc::ServerContext* context, const ::account::LoginMsg* request, ::account::AccountResp* response);
    virtual ::grpc::Status logout(::grpc::ServerContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response);
    virtual ::grpc::Status isAlive(::grpc::ServerContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_signup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_signup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_signup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signup(::grpc::ServerContext* /*context*/, const ::account::SignupMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsignup(::grpc::ServerContext* context, ::account::SignupMsg* request, ::grpc::ServerAsyncResponseWriter< ::account::AccountResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::account::LoginMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::account::LoginMsg* request, ::grpc::ServerAsyncResponseWriter< ::account::AccountResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_logout() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::account::TokenMsg* request, ::grpc::ServerAsyncResponseWriter< ::account::AccountResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isAlive() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisAlive(::grpc::ServerContext* context, ::account::TokenMsg* request, ::grpc::ServerAsyncResponseWriter< ::account::AccountResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_signup<WithAsyncMethod_login<WithAsyncMethod_logout<WithAsyncMethod_isAlive<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_signup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_signup() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::account::SignupMsg, ::account::AccountResp>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::account::SignupMsg* request, ::account::AccountResp* response) { return this->signup(context, request, response); }));}
    void SetMessageAllocatorFor_signup(
        ::grpc::experimental::MessageAllocator< ::account::SignupMsg, ::account::AccountResp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::account::SignupMsg, ::account::AccountResp>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_signup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signup(::grpc::ServerContext* /*context*/, const ::account::SignupMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* signup(::grpc::experimental::CallbackServerContext* /*context*/, const ::account::SignupMsg* /*request*/, ::account::AccountResp* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_login() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::account::LoginMsg, ::account::AccountResp>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::account::LoginMsg* request, ::account::AccountResp* response) { return this->login(context, request, response); }));}
    void SetMessageAllocatorFor_login(
        ::grpc::experimental::MessageAllocator< ::account::LoginMsg, ::account::AccountResp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::account::LoginMsg, ::account::AccountResp>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::account::LoginMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* login(::grpc::experimental::CallbackServerContext* /*context*/, const ::account::LoginMsg* /*request*/, ::account::AccountResp* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_logout() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::account::TokenMsg, ::account::AccountResp>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response) { return this->logout(context, request, response); }));}
    void SetMessageAllocatorFor_logout(
        ::grpc::experimental::MessageAllocator< ::account::TokenMsg, ::account::AccountResp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::account::TokenMsg, ::account::AccountResp>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* logout(::grpc::experimental::CallbackServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_isAlive() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::account::TokenMsg, ::account::AccountResp>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::account::TokenMsg* request, ::account::AccountResp* response) { return this->isAlive(context, request, response); }));}
    void SetMessageAllocatorFor_isAlive(
        ::grpc::experimental::MessageAllocator< ::account::TokenMsg, ::account::AccountResp>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::account::TokenMsg, ::account::AccountResp>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* isAlive(::grpc::experimental::CallbackServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_signup<ExperimentalWithCallbackMethod_login<ExperimentalWithCallbackMethod_logout<ExperimentalWithCallbackMethod_isAlive<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_signup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_signup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_signup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signup(::grpc::ServerContext* /*context*/, const ::account::SignupMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::account::LoginMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_logout() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isAlive() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_signup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_signup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_signup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signup(::grpc::ServerContext* /*context*/, const ::account::SignupMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsignup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::account::LoginMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_logout() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isAlive() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisAlive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_signup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_signup() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->signup(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_signup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status signup(::grpc::ServerContext* /*context*/, const ::account::SignupMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* signup(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_login() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::account::LoginMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* login(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_logout() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->logout(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* logout(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_isAlive() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isAlive(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* isAlive(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_signup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_signup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::account::SignupMsg, ::account::AccountResp>(std::bind(&WithStreamedUnaryMethod_signup<BaseClass>::Streamedsignup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_signup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status signup(::grpc::ServerContext* /*context*/, const ::account::SignupMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsignup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account::SignupMsg,::account::AccountResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::account::LoginMsg, ::account::AccountResp>(std::bind(&WithStreamedUnaryMethod_login<BaseClass>::Streamedlogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::account::LoginMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account::LoginMsg,::account::AccountResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_logout() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::account::TokenMsg, ::account::AccountResp>(std::bind(&WithStreamedUnaryMethod_logout<BaseClass>::Streamedlogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logout(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account::TokenMsg,::account::AccountResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isAlive() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::account::TokenMsg, ::account::AccountResp>(std::bind(&WithStreamedUnaryMethod_isAlive<BaseClass>::StreamedisAlive, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_isAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isAlive(::grpc::ServerContext* /*context*/, const ::account::TokenMsg* /*request*/, ::account::AccountResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisAlive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::account::TokenMsg,::account::AccountResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_signup<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_logout<WithStreamedUnaryMethod_isAlive<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_signup<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_logout<WithStreamedUnaryMethod_isAlive<Service > > > > StreamedService;
};

}  // namespace account


#endif  // GRPC_account_2eproto__INCLUDED
